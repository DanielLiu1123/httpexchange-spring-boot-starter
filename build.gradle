plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version "${spotlessVersion}"
    id 'com.github.spotbugs' version "${spotbugsVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/snapshot"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    api("org.springframework.boot:spring-boot-starter")
    api("org.springframework:spring-web")
    compileOnly("org.springframework:spring-webflux")

    compileOnly("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")

    // dynamic refresh configuration for exchange clients
    compileOnly("org.springframework.cloud:spring-cloud-context")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    testImplementation("org.springframework:spring-webflux")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.freemanan:classpath-replacer-junit5:${classpathReplacerVersion}")

    testCompileOnly("org.springframework.boot:spring-boot-starter-web")
    testCompileOnly("org.springframework.boot:spring-boot-starter-webflux")
    testCompileOnly("org.springframework.boot:spring-boot-starter-validation")
    testImplementation("org.springframework.cloud:spring-cloud-context")
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

test {
    useJUnitPlatform()
}

spotless {
    encoding 'UTF-8'
    java {
        toggleOffOn()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        palantirJavaFormat()

        custom('Refuse wildcard imports', {
            if (it =~ /\nimport .*\*;/) {
                throw new IllegalStateException("Do not use wildcard imports, 'spotlessApply' cannot resolve this issue, please fix it manually.")
            }
        } as Closure<String>)
    }
}

spotbugs {
    spotbugsTest.enabled = false
    omitVisitors.addAll('FindReturnRef', 'MethodReturnCheck')
}

apply from: "${rootDir}/deploy.gradle"
