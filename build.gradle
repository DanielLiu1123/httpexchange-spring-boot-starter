plugins {
    id 'com.diffplug.spotless' version "${spotlessVersion}" apply false
    id 'com.github.spotbugs' version "${spotbugsVersion}" apply false
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}" apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    java {
        registerFeature('optionalSupport') {
            usingSourceSet(sourceSets.main)
        }
    }

    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    test {
        useJUnitPlatform()
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        encoding 'UTF-8'
        java {
            toggleOffOn()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            palantirJavaFormat()

            custom('Refuse wildcard imports', {
                if (it =~ /\nimport .*\*;/) {
                    throw new IllegalStateException("Do not use wildcard imports, 'spotlessApply' cannot resolve this issue, please fix it manually.")
                }
            } as Closure<String>)
        }
    }

    apply plugin: 'com.github.spotbugs'
    spotbugs {
        spotbugsTest.enabled = false
        omitVisitors.addAll('FindReturnRef', 'DontReusePublicIdentifiers')
    }
}

tasks.register('installGitHook', Copy) {
    from "$rootProject.rootDir/.githooks"
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}
compileJava.dependsOn installGitHook
