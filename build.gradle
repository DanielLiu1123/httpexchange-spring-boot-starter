plugins {
    id "com.diffplug.spotless" version "${spotlessVersion}" apply false
    id "com.github.spotbugs" version "${spotbugsVersion}" apply false
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}" apply false
    id "org.springframework.boot" version "${springBootVersion}" apply false
    id "org.graalvm.buildtools.native" version "${graalvmBuildToolsVersion}" apply false
}

allprojects {
    if (project.path.startsWith(":example")) {
        apply plugin: "java"
    } else {
        apply plugin: "java-library"
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    sourceSets {
        optionalSupport
    }

    java {
        registerFeature("optionalSupport") {
            usingSourceSet(sourceSets.optionalSupport)
        }
    }

    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }
    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
    }

    test {
        useJUnitPlatform()
    }

    apply plugin: "com.diffplug.spotless"
    spotless {
        encoding "UTF-8"
        java {
            toggleOffOn()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            palantirJavaFormat()

            targetExclude("build/generated/**")

            custom("Refuse wildcard imports", {
                if (it =~ /\nimport .*\*;/) {
                    throw new IllegalStateException("Do not use wildcard imports, 'spotlessApply' cannot resolve this issue, please fix it manually.")
                }
            } as Closure<String>)
        }
    }

    apply plugin: "com.github.spotbugs"
    spotbugs {
        spotbugsTest.enabled = false
        omitVisitors.addAll("FindReturnRef", "DontReusePublicIdentifiers")
    }
}
