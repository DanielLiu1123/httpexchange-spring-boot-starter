"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[156],{6560:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=n(7624),r=n(2172);const o={sidebar_position:80},s="Customization",a={id:"extensions/customization",title:"Customization",description:"This library is designed to be highly customizable. You can customize the behavior of the library by providing your own implementations.",source:"@site/docs/20-extensions/80-customization.mdx",sourceDirName:"20-extensions",slug:"/extensions/customization",permalink:"/httpexchange-spring-boot-starter/docs/next/extensions/customization",draft:!1,unlisted:!1,editUrl:"https://github.com/DanielLiu1123/httpexchange-spring-boot-starter/tree/main/website/docs/20-extensions/80-customization.mdx",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80},sidebar:"tutorialSidebar",previous:{title:"Native Image",permalink:"/httpexchange-spring-boot-starter/docs/next/extensions/native-image"},next:{title:"Version Compatibility",permalink:"/httpexchange-spring-boot-starter/docs/next/version"}},c={},l=[{value:"Custom HttpServiceArgumentResolver",id:"custom-httpserviceargumentresolver",level:2},{value:"Change Client Type",id:"change-client-type",level:2},{value:"Change Http Client Implementation",id:"change-http-client-implementation",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"customization",children:"Customization"}),"\n",(0,i.jsx)(t.p,{children:"This library is designed to be highly customizable. You can customize the behavior of the library by providing your own implementations."}),"\n",(0,i.jsxs)(t.h2,{id:"custom-httpserviceargumentresolver",children:["Custom ",(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-framework/docs/current//javadoc-api/org/springframework/web/service/invoker/class-use/HttpServiceArgumentResolver.html",children:"HttpServiceArgumentResolver"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@Bean\nHttpServiceArgumentResolver yourHttpServiceArgumentResolver() {\n  return new YourHttpServiceArgumentResolver();\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Auto-detect all the ",(0,i.jsx)(t.code,{children:"HttpServiceArgumentResolver"})," beans, then apply them to build the ",(0,i.jsx)(t.code,{children:"HttpServiceProxyFactory"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"change-client-type",children:"Change Client Type"}),"\n",(0,i.jsxs)(t.p,{children:["There are many adapters for HttpExchange client: ",(0,i.jsx)(t.code,{children:"RestClientAdapter"}),", ",(0,i.jsx)(t.code,{children:"WebClientAdapter"})," and ",(0,i.jsx)(t.code,{children:"RestTemplateAdapter"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="application.yml"',children:"http-exchange:\n  client-type: REST_CLIENT\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The framework will choose the appropriate adapter according to the http client interface.\nIf any method in the interface returns a reactive type (Mono/Flux), then ",(0,i.jsx)(t.code,{children:"WebClient"})," will be used, otherwise ",(0,i.jsx)(t.code,{children:"RestClient"})," will be used.\n",(0,i.jsx)(t.strong,{children:"In most cases, there's no need to explicitly specify the client type."})]}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"connectTimeout"})," settings are not supported by ",(0,i.jsx)(t.code,{children:"WEB_CLIENT"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"change-http-client-implementation",children:"Change Http Client Implementation"}),"\n",(0,i.jsxs)(t.p,{children:["For ",(0,i.jsx)(t.code,{children:"RestClient"})," and ",(0,i.jsx)(t.code,{children:"RestTemplate"}),", there are many built-in implementations of ",(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestFactory.html",children:(0,i.jsx)(t.code,{children:"ClientHttpRequestFactory"})}),",\nuse ",(0,i.jsx)(t.code,{children:"EnhancedJdkClientHttpRequestFactory"})," to support dynamic ",(0,i.jsx)(t.code,{children:"read-timeout"})," by default."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Change ClientHttpRequestFactory for RestClient\n@Bean\nRestClientCustomizer restClientCustomizer() {\n    return builder -> builder.requestFactory(new ReactorNettyClientRequestFactory());\n}\n\n// Change ClientHttpRequestFactory for RestTemplate\n@Bean\nRestTemplateCustomizer restTemplateCustomizer() {\n    return restTemplate -> restTemplate.setRequestFactory(new ReactorNettyClientRequestFactory());\n}\n\n// Change ClientHttpConnector for WebClient\n@Bean\nWebClientCustomizer webClientCustomizer() {\n    return builder -> builder.clientConnector(new ReactorClientHttpConnector());\n}\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["If choose to use other implementations, dynamic ",(0,i.jsx)(t.code,{children:"read-timeout"})," for single request will not be supported,\nSpring does not provide an extension point to support this feature,\nsee ",(0,i.jsx)(t.a,{href:"https://github.com/spring-projects/spring-framework/issues/31926",children:"issue"}),"."]})})]})}function p(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2172:(e,t,n)=>{n.d(t,{I:()=>a,M:()=>s});var i=n(1504);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);